1. Update the showBankSelectionDialog
Modify the showBankSelectionDialog function to return both doc.id and accountName as a Map:

dart
Copy code
import 'package:flutter/material.dart';

Future<Map<String, String>?> showBankSelectionDialog(BuildContext context, String userId, String type) async {
  final List<Map<String, dynamic>> banks = await fetchBanks(userId, type);
  final TextEditingController searchController = TextEditingController();

  return showDialog<Map<String, String>>(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        title: const Text('Select Bank'),
        content: SizedBox(
          width: double.maxFinite,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: searchController,
                decoration: const InputDecoration(labelText: 'Search'),
                onChanged: (text) {
                  (context as Element).markNeedsBuild();
                },
              ),
              ConstrainedBox(
                constraints: BoxConstraints(
                  maxHeight: 300,
                ),
                child: SingleChildScrollView(
                  child: StreamBuilder<List<Map<String, dynamic>>>(
                    stream: Stream.fromFuture(Future.value(banks)),
                    builder: (context, snapshot) {
                      if (snapshot.connectionState == ConnectionState.waiting) {
                        return const Center(child: CircularProgressIndicator());
                      }
                      if (!snapshot.hasData || snapshot.data!.isEmpty) {
                        return const Center(child: Text('No banks found.'));
                      }

                      final filteredBanks = snapshot.data!.where((bank) {
                        final accountName = bank['accountName'].toLowerCase();
                        final query = searchController.text.toLowerCase();
                        return accountName.contains(query);
                      }).toList();

                      return Column(
                        children: filteredBanks.map((bank) {
                          return ListTile(
                            title: Text(bank['accountName']),
                            onTap: () {
                              Navigator.of(context).pop({
                                'id': bank['id'],
                                'accountName': bank['accountName'],
                              });
                            },
                          );
                        }).toList(),
                      );
                    },
                  ),
                ),
              ),
            ],
          ),
        ),
      );
    },
  );
}
2. Handle the Returned Data in CashBankToggle
Update the CashBankToggle widget to handle the selected bank data and pass it to another screen or widget.

dart
Copy code
import 'package:flutter/material.dart';

class CashBankToggle extends StatefulWidget {
  @override
  _CashBankToggleState createState() => _CashBankToggleState();
}

class _CashBankToggleState extends State<CashBankToggle> {
  List<bool> _isSelected = [true, false];
  String userId = 'exampleUserId'; // Replace with actual user ID
  String type = 'exampleType'; // Replace with actual type

  @override
  Widget build(BuildContext context) {
    return Center(
      child: ToggleButtons(
        isSelected: _isSelected,
        onPressed: (int index) async {
          setState(() {
            for (int i = 0; i < _isSelected.length; i++) {
              _isSelected[i] = i == index;
            }
          });

          if (index == 1) { // Index 1 corresponds to the 'Bank' option
            final result = await showBankSelectionDialog(context, userId, type);

            if (result != null) {
              // Extract the selected bank's id and accountName
              final String selectedId = result['id']!;
              final String selectedAccountName = result['accountName']!;

              // Pass these variables to another screen or use them as needed
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => AnotherScreen(
                    bankId: selectedId,
                    bankAccountName: selectedAccountName,
                  ),
                ),
              );
            }
          }
        },
        borderRadius: BorderRadius.circular(10.0),
        selectedColor: Colors.white,
        fillColor: Colors.teal,
        color: Colors.black,
        children: [
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 30.0),
            child: Text('Cash'),
          ),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 30.0),
            child: Text('Bank'),
          ),
        ],
      ),
    );
  }
}
3. Define the Target Screen
Create a screen to display the selected bankâ€™s information:

dart
Copy code
import 'package:flutter/material.dart';

class AnotherScreen extends StatelessWidget {
  final String bankId;
  final String bankAccountName;

  AnotherScreen({
    required this.bankId,
    required this.bankAccountName,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Bank Details'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Bank ID: $bankId', style: Theme.of(context).textTheme.headline6),
            SizedBox(height: 8),
            Text('Account Name: $bankAccountName', style: Theme.of(context).textTheme.headline6),
          ],
        ),
      ),
    );
  }
}
Summary
Updated showBankSelectionDialog to return both doc.id and accountName.
Handled the returned data in CashBankToggle and navigated to another screen with this data.
Created a target screen (AnotherScreen) to display the selected bank details.
This approach ensures that you can select a bank, pass its details to another screen, and display those details as needed.




